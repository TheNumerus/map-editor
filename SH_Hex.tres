[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=3]

[sub_resource type="VisualShaderNodeExpression" id=12]
size = Vector2( 250, 150 )
expression = "albedo = COLOR.xyz"

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 629, 406 )
expression = "if (!paused) {
	float sine_input = (time * speed) + INSTANCE_CUSTOM.x;
	pos = vec3(vertex.x, vertex.y + sin(sine_input) * scale, vertex.z);
} else {
	pos = vertex;
}"

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "offset"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "scale"

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "speed"

[sub_resource type="VisualShaderNodeBooleanUniform" id=8]
uniform_name = "paused"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "time"

[resource]
code = "shader_type spatial;
uniform float scale;
uniform float speed;
uniform bool paused;



void vertex() {
// Input:2
	vec3 n_out2p0 = VERTEX;

// Input:4
	float n_out4p0 = TIME;

// ScalarUniform:12
	float n_out12p0 = scale;

// ScalarUniform:13
	float n_out13p0 = speed;

// BooleanUniform:14
	bool n_out14p0 = paused;

// Expression:10
	vec3 n_out10p0;
	n_out10p0 = vec3(0.0, 0.0, 0.0);
	{
		if (!n_out14p0) {
			float sine_input = (n_out4p0 * n_out13p0) + INSTANCE_CUSTOM.x;
			n_out10p0 = vec3(n_out2p0.x, n_out2p0.y + sin(sine_input) * n_out12p0, n_out2p0.z);
		} else {
			n_out10p0 = n_out2p0;
		}
	}

// Input:3
	vec3 n_out3p0 = NORMAL;

// Output:0
	VERTEX = n_out10p0;
	NORMAL = n_out3p0;

}

void fragment() {
// Expression:5
	vec3 n_out5p0;
	n_out5p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out5p0 = COLOR.xyz
	}

// Scalar:3
	float n_out3p0 = 0.000000;

// Scalar:4
	float n_out4p0 = 0.000000;

// Output:0
	ALBEDO = n_out5p0;
	METALLIC = n_out3p0;
	ROUGHNESS = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -289, 36 )
nodes/vertex/0/position = Vector2( 740, 180 )
nodes/vertex/2/node = SubResource( 9 )
nodes/vertex/2/position = Vector2( -220, 220 )
nodes/vertex/3/node = SubResource( 10 )
nodes/vertex/3/position = Vector2( 520, 200 )
nodes/vertex/4/node = SubResource( 11 )
nodes/vertex/4/position = Vector2( -200, 360 )
nodes/vertex/10/node = SubResource( 4 )
nodes/vertex/10/position = Vector2( 40, 280 )
nodes/vertex/10/size = Vector2( 629, 406 )
nodes/vertex/10/input_ports = "0,1,vertex;1,0,time;2,0,scale;3,0,speed;4,2,paused;"
nodes/vertex/10/output_ports = "0,1,pos;"
nodes/vertex/10/expression = "if (!paused) {
	float sine_input = (time * speed) + INSTANCE_CUSTOM.x;
	pos = vec3(vertex.x, vertex.y + sin(sine_input) * scale, vertex.z);
} else {
	pos = vertex;
}"
nodes/vertex/11/node = SubResource( 5 )
nodes/vertex/11/position = Vector2( -240, 440 )
nodes/vertex/12/node = SubResource( 6 )
nodes/vertex/12/position = Vector2( -240, 520 )
nodes/vertex/13/node = SubResource( 7 )
nodes/vertex/13/position = Vector2( -260, 620 )
nodes/vertex/14/node = SubResource( 8 )
nodes/vertex/14/position = Vector2( -240, 700 )
nodes/vertex/connections = PoolIntArray( 3, 0, 0, 1, 4, 0, 10, 1, 2, 0, 10, 0, 10, 0, 0, 0, 12, 0, 10, 2, 13, 0, 10, 3, 14, 0, 10, 4 )
nodes/fragment/0/position = Vector2( 580, 160 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -60, 280 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -60, 340 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( -20, 80 )
nodes/fragment/5/size = Vector2( 250, 150 )
nodes/fragment/5/input_ports = ""
nodes/fragment/5/output_ports = "0,1,albedo;"
nodes/fragment/5/expression = "albedo = COLOR.xyz"
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 2, 4, 0, 0, 3, 5, 0, 0, 0 )
